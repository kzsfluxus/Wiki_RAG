#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun  5 15:31:49 2025
@author: zsolt
"""
import warnings
import os
warnings.filterwarnings("ignore")
os.environ['PYTHONWARNINGS'] = 'ignore'
from flask import Flask, request, render_template
from pathlib import Path
from embedder import Embedder
from ollama_runner import run_ollama_model
from retriever import auto_fetch_from_config
from text_cleaner import clean_wiki_text
from prompt_builder import build_prompt
from docs_loader import clear_cache, should_refresh_data, load_docs, WIKI_FILE

app = Flask(__name__)

# Glob√°lis v√°ltoz√≥k a cache-hez
_docs = None
_embedder = None
_last_config_check = 0

def get_embedder():
    global _embedder
    if _embedder is None:
        _embedder = Embedder()

        docs = load_docs()

        if Path('data/index.faiss').exists() and not should_refresh_data():
            print("üìä Index bet√∂lt√©se...")
            _embedder.load()
        else:
            print("üî® Index √©p√≠t√©se...")
            _embedder.build_index(docs)
            _embedder.save()
            print("‚úÖ Index mentve")

    return _embedder

def initialize_system():
    """Rendszer inicializ√°l√°sa - ellen≈ërzi √©s friss√≠ti az adatokat ha sz√ºks√©ges"""
    print("üöÄ Wiki RAG Flask alkalmaz√°s ind√≠t√°sa...")

    # Ellen≈ërizz√ºk, hogy kell-e friss√≠teni az adatokat
    if should_refresh_data():
        print("üîÑ Adatok friss√≠t√©se...")
        clear_cache()
        auto_fetch_from_config()

        # Ellen≈ërizz√ºk, hogy siker√ºlt-e a let√∂lt√©s
        if not Path(WIKI_FILE).exists():
            print("‚ùå Nem siker√ºlt let√∂lteni az adatokat!")
            return False
    else:
        print("‚úÖ Adatok naprak√©szek")

    # El≈ëzetes bet√∂lt√©s
    try:
        load_docs()
        get_embedder()
        print("üéØ RAG rendszer k√©sz!")
        return True
    except Exception as error:
        print(f"‚ùå Hiba az inicializ√°l√°s sor√°n: {error}")
        return False

@app.route('/', methods=['GET', 'POST'])
def index():
    try:
        # Rendszer inicializ√°l√°sa (csak az els≈ë k√©r√©skor)
        if not hasattr(app, '_initialized'):
            if not initialize_system():
                return render_template('index.html', 
                                     question="", 
                                     clean_answer="‚ùå Hiba: Nem siker√ºlt inicializ√°lni a rendszert",
                                     error=True)
            app._initialized = True

        # V√°ltoz√≥k inicializ√°l√°sa
        question = ""
        clean_answer = ""  # Ez fontos!

        if request.method == 'POST':
            question = request.form.get('question', '').strip()
            if question:
                try:
                    print(f"üîç K√©rd√©s: {question}")
                    embedder = get_embedder()
                    results = embedder.query(question)
                    print("ü§ñ V√°lasz gener√°l√°sa...")
                    prompt = build_prompt(results, question)
                    raw_answer = run_ollama_model(prompt)
                    clean_answer = clean_wiki_text(raw_answer)  # Itt haszn√°lod a tiszt√≠t√≥ f√ºggv√©nyt
                    print(f"‚úÖ Tiszt√≠tott v√°lasz: {clean_answer[:100]}...")  # Debug log
                except Exception as error:
                    print(f"‚ùå Hiba a k√©rd√©s feldolgoz√°sa sor√°n: {error}")
                    clean_answer = f"‚ùå Hiba t√∂rt√©nt: {str(error)}"
            else:
                clean_answer = "K√©rlek, adj meg egy k√©rd√©st!"

        return render_template('index.html', question=question, clean_answer=clean_answer)

    except Exception as error:
        print(f"‚ùå √Åltal√°nos hiba: {error}")
        return render_template('index.html', 
                             question="", 
                             clean_answer=f"‚ùå Rendszerhiba: {str(error)}",
                             error=True)

@app.route('/refresh', methods=['POST'])
def refresh_data():
    """Manu√°lis adatfriss√≠t√©s v√©gpont"""
    try:
        print("üîÑ Manu√°lis cache t√∂rl√©s...")
        clear_cache()
        auto_fetch_from_config()

        # Rendszer √∫jrainicializ√°l√°sa
        if hasattr(app, '_initialized'):
            delattr(app, '_initialized')

        return {"status": "success", "message": "Adatok friss√≠tve!"}
    except Exception as error:
        return {"status": "error", "message": f"Hiba: {str(error)}"}

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)