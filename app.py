#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun  5 15:31:49 2025
@author: zsolt
"""
import warnings
import os
import shutil
import configparser
import re
warnings.filterwarnings("ignore")
os.environ['PYTHONWARNINGS'] = 'ignore'
from flask import Flask, request, render_template
from pathlib import Path
import json
from embedder import Embedder
from ollama_runner import run_mistral
from retriever import auto_fetch_from_config

app = Flask(__name__)

WIKI_FILE = 'data/wiki_pages.json'
CONFIG_FILE = 'wiki_rag.conf'

# Glob√°lis v√°ltoz√≥k a cache-hez
_docs = None
_embedder = None
_last_config_check = 0

def clear_cache():
    """T√∂rli a cache-elt adatokat √©s indexeket"""
    global _docs, _embedder
    try:
        # Mem√≥ria cache t√∂rl√©se
        _docs = None
        _embedder = None

        # Data k√∂nyvt√°r t√∂rl√©se
        if os.path.exists('data'):
            shutil.rmtree('data')
            print("üóëÔ∏è Cache t√∂r√∂lve (data k√∂nyvt√°r)")

        # FAISS index t√∂rl√©se
        faiss_files = ['data/index.faiss', 'data/index.pkl']
        for file in faiss_files:
            if os.path.exists(file):
                os.remove(file)
                print(f"üóëÔ∏è Index f√°jl t√∂r√∂lve: {file}")

        return True
    except Exception as error:
        print(f"‚ùå Hiba cache t√∂rl√©se k√∂zben: {error}")
        return False

def should_refresh_data():
    """Ellen≈ërzi, hogy sz√ºks√©ges-e az adatok friss√≠t√©se"""
    # Ha nincs wiki f√°jl, friss√≠teni kell
    if not Path(WIKI_FILE).exists():
        print("‚ÑπÔ∏è Nincs wiki adat, let√∂lt√©s sz√ºks√©ges")
        return True

    # Ha nincs config f√°jl, nem tudjuk ellen≈ërizni
    if not Path(CONFIG_FILE).exists():
        return False

    try:
        # F√°jlok m√≥dos√≠t√°si idej√©nek ellen≈ërz√©se
        wiki_mtime = os.path.getmtime(WIKI_FILE)
        config_mtime = os.path.getmtime(CONFIG_FILE)

        # Ha a config √∫jabb, mint a wiki adat, friss√≠teni kell
        if config_mtime > wiki_mtime:
            print("üîÑ Konfigur√°ci√≥ √∫jabb mint az adat, friss√≠t√©s sz√ºks√©ges")
            return True

        # Ellen≈ërizz√ºk, hogy a wiki f√°jlban t√©nyleg a config szerinti v√°ros van-e
        with open(WIKI_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # Config-b√≥l olvassuk ki, hogy mit kellene tartalmaznia
        config = configparser.ConfigParser()
        config.read(CONFIG_FILE)

        if config.has_section('selected'):
            expected_pages = config.get('selected', 'pages', fallback='').strip()
            expected_titles = [p.strip() for p in expected_pages.split(',') if p.strip()]

            # Ellen≈ërizz√ºk, hogy a v√°rt oldalak szerepelnek-e
            actual_titles = [doc.get('title', '') for doc in data]

            for expected in expected_titles:
                if not any(expected.lower() in title.lower() for title in actual_titles):
                    print(f"‚ö†Ô∏è Hi√°nyz√≥ oldal az adatokb√≥l: {expected}")
                    return True

    except Exception as error:
        print(f"‚ö†Ô∏è Nem siker√ºlt ellen≈ërizni az adatok frissess√©g√©t: {error}")
        return False

    return False

def load_docs():
    global _docs
    if _docs is None:
        with open(WIKI_FILE, 'r', encoding='utf-8') as f:
            _docs = json.load(f)
        print(f"üìö Bet√∂ltve: {len(_docs)} dokumentum")
        titles = [doc.get('title', 'N√©vtelen') for doc in _docs]
        print(f"üìÑ Oldalak: {', '.join(titles)}")
    return _docs

def get_embedder():
    global _embedder
    if _embedder is None:
        _embedder = Embedder()

        docs = load_docs()

        if Path('data/index.faiss').exists() and not should_refresh_data():
            print("üìä Index bet√∂lt√©se...")
            _embedder.load()
        else:
            print("üî® Index √©p√≠t√©se...")
            _embedder.build_index(docs)
            _embedder.save()
            print("‚úÖ Index mentve")

    return _embedder

def build_prompt(contexts, question):
    prompt = "Az al√°bbi MediaWiki oldalak alapj√°n v√°laszolj a k√©rd√©sre:\n\n"
    for doc in contexts:
        prompt += f"== {doc['title']} ==\n{doc['text'][:1000]}\n\n"
    prompt += f"K√©rd√©s: {question}\nV√°lasz:"
    return prompt

def initialize_system():
    """Rendszer inicializ√°l√°sa - ellen≈ërzi √©s friss√≠ti az adatokat ha sz√ºks√©ges"""
    print("üöÄ Wiki RAG Flask alkalmaz√°s ind√≠t√°sa...")

    # Ellen≈ërizz√ºk, hogy kell-e friss√≠teni az adatokat
    if should_refresh_data():
        print("üîÑ Adatok friss√≠t√©se...")
        clear_cache()
        auto_fetch_from_config()

        # Ellen≈ërizz√ºk, hogy siker√ºlt-e a let√∂lt√©s
        if not Path(WIKI_FILE).exists():
            print("‚ùå Nem siker√ºlt let√∂lteni az adatokat!")
            return False
    else:
        print("‚úÖ Adatok naprak√©szek")

    # El≈ëzetes bet√∂lt√©s
    try:
        load_docs()
        get_embedder()
        print("üéØ RAG rendszer k√©sz!")
        return True
    except Exception as error:
        print(f"‚ùå Hiba az inicializ√°l√°s sor√°n: {error}")
        return False

def clean_wiki_text(text):
    """
    Wikipedia sz√∂veg teljes tiszt√≠t√°sa a legtiszt√°bb v√°lasz √©rdek√©ben
    """
    if not text:
        return text

    # 1. Link form√°tumok tiszt√≠t√°sa
    text = re.sub(r'\[\[([^|\]]+)\|([^\]]+)\]\]', r'\2', text)  # [[link|display]] -> display
    text = re.sub(r'\[\[([^\]]+)\]\]', r'\1', text)            # [[link]] -> link

    # 2. Template-ek elt√°vol√≠t√°sa
    text = re.sub(r'\{\{[^}]+\}\}', '', text)

    # 3. Referenci√°k elt√°vol√≠t√°sa
    text = re.sub(r'<ref[^>]*>.*?</ref>', '', text, flags=re.DOTALL)
    text = re.sub(r'<ref[^>]*\/>', '', text)

    # 4. HTML tagek elt√°vol√≠t√°sa
    text = re.sub(r'<[^>]+>', '', text)

    # 5. Wiki markup elemek
    text = re.sub(r"'''([^']+)'''", r'\1', text)  # '''bold''' -> bold
    text = re.sub(r"''([^']+)''", r'\1', text)    # ''italic'' -> italic

    # 6. Sz√≥k√∂z√∂k √©s sorok rendez√©se
    text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)  # T√∂bb √ºres sor -> dupla
    text = re.sub(r' +', ' ', text)                 # T√∂bb sz√≥k√∂z -> egy
    text = re.sub(r'\n ', '\n', text)               # Sorok eleji sz√≥k√∂z√∂k

    return text.strip()

@app.route('/', methods=['GET', 'POST'])
def index():
    try:
        # Rendszer inicializ√°l√°sa (csak az els≈ë k√©r√©skor)
        if not hasattr(app, '_initialized'):
            if not initialize_system():
                return render_template('index.html', 
                                     question="", 
                                     clean_answer="‚ùå Hiba: Nem siker√ºlt inicializ√°lni a rendszert",
                                     error=True)
            app._initialized = True

        # V√°ltoz√≥k inicializ√°l√°sa
        question = ""
        clean_answer = ""  # Ez fontos!

        if request.method == 'POST':
            question = request.form.get('question', '').strip()
            if question:
                try:
                    print(f"üîç K√©rd√©s: {question}")
                    embedder = get_embedder()
                    results = embedder.query(question)
                    print("ü§ñ V√°lasz gener√°l√°sa...")
                    prompt = build_prompt(results, question)
                    raw_answer = run_mistral(prompt)
                    clean_answer = clean_wiki_text(raw_answer)  # Itt haszn√°lod a tiszt√≠t√≥ f√ºggv√©nyt
                    print(f"‚úÖ Tiszt√≠tott v√°lasz: {clean_answer[:100]}...")  # Debug log
                except Exception as error:
                    print(f"‚ùå Hiba a k√©rd√©s feldolgoz√°sa sor√°n: {error}")
                    clean_answer = f"‚ùå Hiba t√∂rt√©nt: {str(error)}"
            else:
                clean_answer = "K√©rlek, adj meg egy k√©rd√©st!"

        return render_template('index.html', question=question, clean_answer=clean_answer)

    except Exception as error:
        print(f"‚ùå √Åltal√°nos hiba: {error}")
        return render_template('index.html', 
                             question="", 
                             clean_answer=f"‚ùå Rendszerhiba: {str(error)}",
                             error=True)

@app.route('/refresh', methods=['POST'])
def refresh_data():
    """Manu√°lis adatfriss√≠t√©s v√©gpont"""
    try:
        print("üîÑ Manu√°lis cache t√∂rl√©s...")
        clear_cache()
        auto_fetch_from_config()

        # Rendszer √∫jrainicializ√°l√°sa
        if hasattr(app, '_initialized'):
            delattr(app, '_initialized')

        return {"status": "success", "message": "Adatok friss√≠tve!"}
    except Exception as error:
        return {"status": "error", "message": f"Hiba: {str(error)}"}

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)