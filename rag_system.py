#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RAG System - K√∂z√∂s oszt√°ly a CLI √©s Flask alkalmaz√°sokhoz
Created on Thu Jun  6 15:31:49 2025
@author: zsolt
"""
from docs_loader import clear_cache, should_refresh_data, load_docs, WIKI_FILE
from prompt_builder import build_prompt
from text_cleaner import clean_wiki_text
from retriever import auto_fetch_from_config
from ollama_runner import run_ollama_model, stop_ollama_model
from embedder import Embedder
import atexit
import signal
import sys
from pathlib import Path
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


class RAGInitializationError(Exception):
    """RAG rendszer inicializ√°l√°si hiba"""
    pass


class RAGQueryError(Exception):
    """RAG lek√©rdez√©si hiba"""
    pass


class RAGSystem:
    """
    Wiki RAG rendszer k√∂zponti oszt√°lya
    Kezeli az adatok bet√∂lt√©s√©t, indexel√©s√©t √©s a k√©rd√©sek feldolgoz√°s√°t
    """

    def __init__(self):
        self._docs = None
        self._embedder = None
        self._initialized = False
        self._last_config_check = 0
        self._cleanup_registered = False
        self._cleanup_executed = False
        logger.info("üöÄ RAG System objektum l√©trehozva")

        # Cleanup regisztr√°l√°sa egyszer
        self._register_cleanup()

    def _register_cleanup(self):
        """
        Cleanup funkci√≥k regisztr√°l√°sa program kil√©p√©skor
        """
        if not self._cleanup_registered:
            # Atexit cleanup regisztr√°l√°sa
            atexit.register(self._cleanup_handler)

            # Signal handlerek regisztr√°l√°sa
            try:
                signal.signal(signal.SIGINT, self._signal_handler)   # Ctrl+C
                signal.signal(
                    signal.SIGTERM,
                    self._signal_handler)  # Termination
            except ValueError:
                # El≈ëfordulhat hogy m√°r regisztr√°lva van vagy nem t√°mogatott
                logger.debug(
                    "Signal handlerek regisztr√°l√°sa sikertelen (nem kritikus)")

            self._cleanup_registered = True
            logger.debug("üõ°Ô∏è  Cleanup handlerek regisztr√°lva")

    def _signal_handler(self, signum, frame):
        """Signal handler a program megszak√≠t√°s√°hoz"""
        logger.info(f"üõë Signal fogadva: {signum}")
        self._cleanup_handler()
        sys.exit(0)

    def _cleanup_handler(self):
        """Cleanup handler - ollama processek le√°ll√≠t√°sa"""
        if self._cleanup_executed:  # Dupla fut√°s elker√ºl√©se
            return

        self._cleanup_executed = True  # Flag be√°ll√≠t√°sa
        try:
            stop_ollama_model()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Cleanup handler hiba: {e}")

    @property
    def is_initialized(self) -> bool:
        """Visszaadja, hogy a rendszer inicializ√°lva van-e"""
        return self._initialized

    def _check_and_refresh_data(self) -> bool:
        """
        Ellen≈ërzi √©s friss√≠ti az adatokat ha sz√ºks√©ges

        Returns:
            bool: True ha siker√ºlt, False ha hiba t√∂rt√©nt
        """
        try:
            if should_refresh_data():
                logger.info("üîÑ Adatok friss√≠t√©se...")
                clear_cache()
                auto_fetch_from_config()

                # Ellen≈ërizz√ºk, hogy siker√ºlt-e a let√∂lt√©s
                if not Path(WIKI_FILE).exists():
                    logger.error("‚ùå Nem siker√ºlt let√∂lteni az adatokat!")
                    return False
            else:
                logger.info("‚úÖ Adatok naprak√©szek")
            return True
        except Exception as error:
            logger.error(f"‚ùå Hiba az adatok friss√≠t√©se sor√°n: {error}")
            return False

    def _load_documents(self) -> bool:
        """
        Dokumentumok bet√∂lt√©se

        Returns:
            bool: True ha siker√ºlt, False ha hiba t√∂rt√©nt
        """
        try:
            self._docs = load_docs()
            logger.info(f"üìö Bet√∂ltve: {len(self._docs)} dokumentum")

            # Ki√≠rjuk, hogy milyen oldalakat tartalmaz
            titles = [doc.get('title', 'N√©vtelen') for doc in self._docs]
            logger.info(
                f"üìÑ Oldalak: {', '.join(titles[:5])}{'...' if len(titles) > 5 else ''}")
            return True
        except Exception as error:
            logger.error(f"‚ùå Hiba az adatok bet√∂lt√©se k√∂zben: {error}")
            return False

    def _initialize_embedder(self) -> bool:
        """
        Embedder inicializ√°l√°sa √©s index bet√∂lt√©se/√©p√≠t√©se

        Returns:
            bool: True ha siker√ºlt, False ha hiba t√∂rt√©nt
        """
        try:
            self._embedder = Embedder()

            # Index bet√∂lt√©se vagy √©p√≠t√©se
            if Path('data/index.faiss').exists() and not should_refresh_data():
                logger.info("üìä Index bet√∂lt√©se...")
                self._embedder.load()
            else:
                logger.info("üî® Index √©p√≠t√©se...")
                if self._docs is None:
                    logger.error(
                        "‚ùå Nincs bet√∂lt√∂tt dokumentum az index √©p√≠t√©shez!")
                    return False
                self._embedder.build_index(self._docs)
                self._embedder.save()
                logger.info("‚úÖ Index mentve")
            return True
        except Exception as error:
            logger.error(f"‚ùå Hiba az embedder inicializ√°l√°sa sor√°n: {error}")
            return False

    def initialize(self) -> bool:
        """
        Teljes rendszer inicializ√°l√°sa

        Returns:
            bool: True ha siker√ºlt, False ha hiba t√∂rt√©nt

        Raises:
            RAGInitializationError: Ha kritikus hiba t√∂rt√©nt
        """
        try:
            logger.info("üöÄ RAG rendszer inicializ√°l√°sa...")

            # Adatok ellen≈ërz√©se √©s friss√≠t√©se
            if not self._check_and_refresh_data():
                raise RAGInitializationError("Adatok friss√≠t√©se sikertelen")

            # Dokumentumok bet√∂lt√©se
            if not self._load_documents():
                raise RAGInitializationError(
                    "Dokumentumok bet√∂lt√©se sikertelen")

            # Embedder inicializ√°l√°sa
            if not self._initialize_embedder():
                raise RAGInitializationError(
                    "Embedder inicializ√°l√°sa sikertelen")

            self._initialized = True
            logger.info("üéØ RAG rendszer k√©sz!")
            return True

        except RAGInitializationError:
            raise
        except Exception as error:
            logger.error(f"‚ùå V√°ratlan hiba az inicializ√°l√°s sor√°n: {error}")
            raise RAGInitializationError(f"Inicializ√°l√°si hiba: {str(error)}")

    def refresh_data(self) -> bool:
        """
        Manu√°lis adatfriss√≠t√©s √©s √∫jrainicializ√°l√°s

        Returns:
            bool: True ha siker√ºlt, False ha hiba t√∂rt√©nt
        """
        try:
            logger.info("üîÑ Manu√°lis adatfriss√≠t√©s...")

            # Cache t√∂rl√©se
            clear_cache()

            # Reinicializ√°l√°s
            self._initialized = False
            self._docs = None
            self._embedder = None

            return self.initialize()

        except Exception as error:
            logger.error(f"‚ùå Hiba az adatfriss√≠t√©s sor√°n: {error}")
            return False

    def process_question(self, question: str) -> str:
        """
        K√©rd√©s feldolgoz√°sa √©s v√°lasz gener√°l√°sa

        Args:
            question (str): A felhaszn√°l√≥ k√©rd√©se

        Returns:
            str: A tiszt√≠tott v√°lasz

        Raises:
            RAGQueryError: Ha hiba t√∂rt√©nt a feldolgoz√°s sor√°n
        """
        if not self._initialized:
            raise RAGQueryError("A RAG rendszer nincs inicializ√°lva!")

        if not question or not question.strip():
            return "K√©rlek, adj meg egy k√©rd√©st!"

        try:
            question = question.strip()
            logger.info(f"üîç K√©rd√©s feldolgoz√°sa: {question[:50]}...")

            # Relev√°ns dokumentumok keres√©se
            results = self._embedder.query(question)
            logger.debug(f"üìä Tal√°lat: {len(results)} dokumentum")

            # Prompt √©p√≠t√©se √©s v√°lasz gener√°l√°sa
            logger.info("ü§ñ V√°lasz gener√°l√°sa...")
            prompt = build_prompt(results, question)
            raw_answer = run_ollama_model(prompt)

            # V√°lasz tiszt√≠t√°sa
            clean_answer = clean_wiki_text(raw_answer)
            logger.info(f"‚úÖ V√°lasz gener√°lva: {len(clean_answer)} karakter")

            return clean_answer

        except Exception as error:
            logger.error(f"‚ùå Hiba a k√©rd√©s feldolgoz√°sa sor√°n: {error}")
            raise RAGQueryError(f"K√©rd√©s feldolgoz√°si hiba: {str(error)}")

    def get_system_info(self) -> Dict[str, Any]:
        """
        Rendszer inform√°ci√≥k lek√©rdez√©se

        Returns:
            Dict[str, Any]: Rendszer √°llapot inform√°ci√≥k
        """
        info = {
            "initialized": self._initialized,
            "documents_loaded": len(self._docs) if self._docs else 0,
            "embedder_ready": self._embedder is not None,
            "index_exists": Path('data/index.faiss').exists(),
            "wiki_file_exists": Path(WIKI_FILE).exists(),
            "cleanup_registered": self._cleanup_registered
        }

        if self._docs:
            info["document_titles"] = [
                doc.get('title', 'N√©vtelen') for doc in self._docs]

        return info

    def __enter__(self):
        """Context manager support"""
        if not self._initialized:
            self.initialize()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager cleanup"""
        logger.info("üßπ RAG System context manager cleanup...")
        self._cleanup_handler()
